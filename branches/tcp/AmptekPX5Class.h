/*----- PROTECTED REGION ID(AmptekPX5Class.h) ENABLED START -----*/
//=============================================================================
//
// file :        AmptekPX5Class.h
//
// description : Include for the AmptekPX5Class root class.
//               This class is the singleton class for.
//               the AmptekPX5 device class..
//               It contains all properties and methods which the .
//               AmptekPX5 requires only once e.g. the commands.
//
// project :     AmptekPX5.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AMPTEKPX5CLASS_H
#define AMPTEKPX5CLASS_H

#include <tango.h>
#include <AmptekPX5.h>

/*----- PROTECTED REGION END -----*/	//	AmptekPX5Class.h


namespace AmptekPX5_ns
{
/*----- PROTECTED REGION ID(AmptekPX5Class::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5Class::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute AcquisitionTime class definition
class AcquisitionTimeAttrib: public Tango::Attr
{
public:
	AcquisitionTimeAttrib():Attr("AcquisitionTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~AcquisitionTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_AcquisitionTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_AcquisitionTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_AcquisitionTime_allowed(ty);}
};

//	Attribute AuxOut1 class definition
class AuxOut1Attrib: public Tango::Attr
{
public:
	AuxOut1Attrib():Attr("AuxOut1",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~AuxOut1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_AuxOut1(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_AuxOut1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_AuxOut1_allowed(ty);}
};

//	Attribute Clock class definition
class ClockAttrib: public Tango::Attr
{
public:
	ClockAttrib():Attr("Clock",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Clock(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_Clock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Clock_allowed(ty);}
};

//	Attribute CoarseGain class definition
class CoarseGainAttrib: public Tango::Attr
{
public:
	CoarseGainAttrib():Attr("CoarseGain",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~CoarseGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CoarseGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_CoarseGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CoarseGain_allowed(ty);}
};

//	Attribute Con1 class definition
class Con1Attrib: public Tango::Attr
{
public:
	Con1Attrib():Attr("Con1",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~Con1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Con1(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_Con1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Con1_allowed(ty);}
};

//	Attribute DeadTime class definition
class DeadTimeAttrib: public Tango::Attr
{
public:
	DeadTimeAttrib():Attr("DeadTime",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~DeadTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_DeadTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_DeadTime_allowed(ty);}
};

//	Attribute FastCount class definition
class FastCountAttrib: public Tango::Attr
{
public:
	FastCountAttrib():Attr("FastCount",
			Tango::DEV_ULONG, Tango::READ) {};
	~FastCountAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FastCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FastCount_allowed(ty);}
};

//	Attribute FineGain class definition
class FineGainAttrib: public Tango::Attr
{
public:
	FineGainAttrib():Attr("FineGain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FineGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FineGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_FineGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FineGain_allowed(ty);}
};

//	Attribute FlatTopWidth class definition
class FlatTopWidthAttrib: public Tango::Attr
{
public:
	FlatTopWidthAttrib():Attr("FlatTopWidth",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FlatTopWidthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FlatTopWidth(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_FlatTopWidth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FlatTopWidth_allowed(ty);}
};

//	Attribute MCAC class definition
class MCACAttrib: public Tango::Attr
{
public:
	MCACAttrib():Attr("MCAC",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~MCACAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_MCAC(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_MCAC(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_MCAC_allowed(ty);}
};

//	Attribute PeakingTime class definition
class PeakingTimeAttrib: public Tango::Attr
{
public:
	PeakingTimeAttrib():Attr("PeakingTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PeakingTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_PeakingTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_PeakingTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_PeakingTime_allowed(ty);}
};

//	Attribute PileupReject class definition
class PileupRejectAttrib: public Tango::Attr
{
public:
	PileupRejectAttrib():Attr("PileupReject",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~PileupRejectAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_PileupReject(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_PileupReject(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_PileupReject_allowed(ty);}
};

//	Attribute SCA1HT class definition
class SCA1HTAttrib: public Tango::Attr
{
public:
	SCA1HTAttrib():Attr("SCA1HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA1HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA1HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA1HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA1HT_allowed(ty);}
};

//	Attribute SCA1LT class definition
class SCA1LTAttrib: public Tango::Attr
{
public:
	SCA1LTAttrib():Attr("SCA1LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA1LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA1LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA1LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA1LT_allowed(ty);}
};

//	Attribute SCA2HT class definition
class SCA2HTAttrib: public Tango::Attr
{
public:
	SCA2HTAttrib():Attr("SCA2HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA2HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA2HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA2HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA2HT_allowed(ty);}
};

//	Attribute SCA2LT class definition
class SCA2LTAttrib: public Tango::Attr
{
public:
	SCA2LTAttrib():Attr("SCA2LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA2LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA2LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA2LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA2LT_allowed(ty);}
};

//	Attribute SCA3HT class definition
class SCA3HTAttrib: public Tango::Attr
{
public:
	SCA3HTAttrib():Attr("SCA3HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA3HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA3HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA3HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA3HT_allowed(ty);}
};

//	Attribute SCA3LT class definition
class SCA3LTAttrib: public Tango::Attr
{
public:
	SCA3LTAttrib():Attr("SCA3LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA3LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA3LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA3LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA3LT_allowed(ty);}
};

//	Attribute SCA4HT class definition
class SCA4HTAttrib: public Tango::Attr
{
public:
	SCA4HTAttrib():Attr("SCA4HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA4HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA4HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA4HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA4HT_allowed(ty);}
};

//	Attribute SCA4LT class definition
class SCA4LTAttrib: public Tango::Attr
{
public:
	SCA4LTAttrib():Attr("SCA4LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA4LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA4LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA4LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA4LT_allowed(ty);}
};

//	Attribute SCA5HT class definition
class SCA5HTAttrib: public Tango::Attr
{
public:
	SCA5HTAttrib():Attr("SCA5HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA5HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA5HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA5HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA5HT_allowed(ty);}
};

//	Attribute SCA5LT class definition
class SCA5LTAttrib: public Tango::Attr
{
public:
	SCA5LTAttrib():Attr("SCA5LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA5LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA5LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA5LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA5LT_allowed(ty);}
};

//	Attribute SCA6HT class definition
class SCA6HTAttrib: public Tango::Attr
{
public:
	SCA6HTAttrib():Attr("SCA6HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA6HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA6HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA6HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA6HT_allowed(ty);}
};

//	Attribute SCA6LT class definition
class SCA6LTAttrib: public Tango::Attr
{
public:
	SCA6LTAttrib():Attr("SCA6LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA6LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA6LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA6LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA6LT_allowed(ty);}
};

//	Attribute SCA7HT class definition
class SCA7HTAttrib: public Tango::Attr
{
public:
	SCA7HTAttrib():Attr("SCA7HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA7HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA7HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA7HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA7HT_allowed(ty);}
};

//	Attribute SCA7LT class definition
class SCA7LTAttrib: public Tango::Attr
{
public:
	SCA7LTAttrib():Attr("SCA7LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA7LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA7LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA7LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA7LT_allowed(ty);}
};

//	Attribute SCA8HT class definition
class SCA8HTAttrib: public Tango::Attr
{
public:
	SCA8HTAttrib():Attr("SCA8HT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA8HTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA8HT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA8HT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA8HT_allowed(ty);}
};

//	Attribute SCA8LT class definition
class SCA8LTAttrib: public Tango::Attr
{
public:
	SCA8LTAttrib():Attr("SCA8LT",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SCA8LTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SCA8LT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_SCA8LT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SCA8LT_allowed(ty);}
};

//	Attribute SlowCount class definition
class SlowCountAttrib: public Tango::Attr
{
public:
	SlowCountAttrib():Attr("SlowCount",
			Tango::DEV_ULONG, Tango::READ) {};
	~SlowCountAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SlowCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SlowCount_allowed(ty);}
};

//	Attribute TotalGain class definition
class TotalGainAttrib: public Tango::Attr
{
public:
	TotalGainAttrib():Attr("TotalGain",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~TotalGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_TotalGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_TotalGain_allowed(ty);}
};

//	Attribute Con2 class definition
class Con2Attrib: public Tango::Attr
{
public:
	Con2Attrib():Attr("Con2",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~Con2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Con2(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_Con2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Con2_allowed(ty);}
};

//	Attribute BufferingStatus class definition
class BufferingStatusAttrib: public Tango::Attr
{
public:
	BufferingStatusAttrib():Attr("BufferingStatus",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~BufferingStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_BufferingStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_BufferingStatus_allowed(ty);}
};

//	Attribute Temperature class definition
class TemperatureAttrib: public Tango::Attr
{
public:
	TemperatureAttrib():Attr("Temperature",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~TemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Temperature_allowed(ty);}
};

//	Attribute CurrentSequentialBuffer class definition
class CurrentSequentialBufferAttrib: public Tango::Attr
{
public:
	CurrentSequentialBufferAttrib():Attr("CurrentSequentialBuffer",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~CurrentSequentialBufferAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CurrentSequentialBuffer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CurrentSequentialBuffer_allowed(ty);}
};

//	Attribute Counter class definition
class CounterAttrib: public Tango::Attr
{
public:
	CounterAttrib():Attr("Counter",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~CounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Counter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Counter_allowed(ty);}
};

//	Attribute CountsRoI1 class definition
class CountsRoI1Attrib: public Tango::Attr
{
public:
	CountsRoI1Attrib():Attr("CountsRoI1",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI1_allowed(ty);}
};

//	Attribute CountsRoI2 class definition
class CountsRoI2Attrib: public Tango::Attr
{
public:
	CountsRoI2Attrib():Attr("CountsRoI2",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI2_allowed(ty);}
};

//	Attribute CountsRoI3 class definition
class CountsRoI3Attrib: public Tango::Attr
{
public:
	CountsRoI3Attrib():Attr("CountsRoI3",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI3_allowed(ty);}
};

//	Attribute CountsRoI4 class definition
class CountsRoI4Attrib: public Tango::Attr
{
public:
	CountsRoI4Attrib():Attr("CountsRoI4",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI4Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI4(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI4_allowed(ty);}
};

//	Attribute CountsRoI5 class definition
class CountsRoI5Attrib: public Tango::Attr
{
public:
	CountsRoI5Attrib():Attr("CountsRoI5",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI5Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI5(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI5_allowed(ty);}
};

//	Attribute CountsRoI6 class definition
class CountsRoI6Attrib: public Tango::Attr
{
public:
	CountsRoI6Attrib():Attr("CountsRoI6",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI6Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI6(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI6_allowed(ty);}
};

//	Attribute CountsRoI7 class definition
class CountsRoI7Attrib: public Tango::Attr
{
public:
	CountsRoI7Attrib():Attr("CountsRoI7",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI7Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI7(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI7_allowed(ty);}
};

//	Attribute CountsRoI8 class definition
class CountsRoI8Attrib: public Tango::Attr
{
public:
	CountsRoI8Attrib():Attr("CountsRoI8",
			Tango::DEV_ULONG, Tango::READ) {};
	~CountsRoI8Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CountsRoI8(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CountsRoI8_allowed(ty);}
};

//	Attribute Spectrum class definition
class SpectrumAttrib: public Tango::SpectrumAttr
{
public:
	SpectrumAttrib():SpectrumAttr("Spectrum",
			Tango::DEV_ULONG, Tango::READ, 8192) {};
	~SpectrumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Spectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Spectrum_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SetTextConfiguration class definition
class SetTextConfigurationClass : public Tango::Command
{
public:
	SetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetTextConfigurationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_SetTextConfiguration_allowed(any);}
};

//	Command GetTextConfiguration class definition
class GetTextConfigurationClass : public Tango::Command
{
public:
	GetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetTextConfigurationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_GetTextConfiguration_allowed(any);}
};

//	Command Echo class definition
class EchoClass : public Tango::Command
{
public:
	EchoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EchoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EchoClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Echo_allowed(any);}
};

//	Command Enable class definition
class EnableClass : public Tango::Command
{
public:
	EnableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EnableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EnableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Enable_allowed(any);}
};

//	Command Disable class definition
class DisableClass : public Tango::Command
{
public:
	DisableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DisableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DisableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Disable_allowed(any);}
};

//	Command ClearSpectrum class definition
class ClearSpectrumClass : public Tango::Command
{
public:
	ClearSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearSpectrumClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_ClearSpectrum_allowed(any);}
};

//	Command LatchGetClearSCA class definition
class LatchGetClearSCAClass : public Tango::Command
{
public:
	LatchGetClearSCAClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LatchGetClearSCAClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LatchGetClearSCAClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_LatchGetClearSCA_allowed(any);}
};

//	Command ClearInputBuffer class definition
class ClearInputBufferClass : public Tango::Command
{
public:
	ClearInputBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearInputBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearInputBufferClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_ClearInputBuffer_allowed(any);}
};

//	Command AutoTune class definition
class AutoTuneClass : public Tango::Command
{
public:
	AutoTuneClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AutoTuneClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AutoTuneClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_AutoTune_allowed(any);}
};

//	Command RestartSequentialBuffering class definition
class RestartSequentialBufferingClass : public Tango::Command
{
public:
	RestartSequentialBufferingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RestartSequentialBufferingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RestartSequentialBufferingClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_RestartSequentialBuffering_allowed(any);}
};

//	Command CancelSequentialBuffering class definition
class CancelSequentialBufferingClass : public Tango::Command
{
public:
	CancelSequentialBufferingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CancelSequentialBufferingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CancelSequentialBufferingClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_CancelSequentialBuffering_allowed(any);}
};

//	Command RequestBuffer class definition
class RequestBufferClass : public Tango::Command
{
public:
	RequestBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RequestBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RequestBufferClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_RequestBuffer_allowed(any);}
};

//	Command BufferSpectrum class definition
class BufferSpectrumClass : public Tango::Command
{
public:
	BufferSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	BufferSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~BufferSpectrumClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_BufferSpectrum_allowed(any);}
};

//	Command SetPredefinedValues class definition
class SetPredefinedValuesClass : public Tango::Command
{
public:
	SetPredefinedValuesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetPredefinedValuesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetPredefinedValuesClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_SetPredefinedValues_allowed(any);}
};

//	Command GetPredefinedValues class definition
class GetPredefinedValuesClass : public Tango::Command
{
public:
	GetPredefinedValuesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetPredefinedValuesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetPredefinedValuesClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_GetPredefinedValues_allowed(any);}
};

//	Command GetSpectrum class definition
class GetSpectrumClass : public Tango::Command
{
public:
	GetSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetSpectrumClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_GetSpectrum_allowed(any);}
};

//	Command InitializeErrorCounter class definition
class InitializeErrorCounterClass : public Tango::Command
{
public:
	InitializeErrorCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	InitializeErrorCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~InitializeErrorCounterClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_InitializeErrorCounter_allowed(any);}
};

//	Command RequestBuffer_Status class definition
class RequestBuffer_StatusClass : public Tango::Command
{
public:
	RequestBuffer_StatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RequestBuffer_StatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RequestBuffer_StatusClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_RequestBuffer_Status_allowed(any);}
};

//	Command ClearCounter class definition
class ClearCounterClass : public Tango::Command
{
public:
	ClearCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearCounterClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_ClearCounter_allowed(any);}
};


/**
 *	The AmptekPX5Class singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  AmptekPX5Class : public Tango::DeviceClass
#else
class AmptekPX5Class : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(AmptekPX5Class::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5Class::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static AmptekPX5Class *init(const char *);
		static AmptekPX5Class *instance();
		~AmptekPX5Class();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		AmptekPX5Class(string &);
		static AmptekPX5Class *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	AmptekPX5_H
