/*----- PROTECTED REGION ID(AmptekPX5.h) ENABLED START -----*/
//=============================================================================
//
// file :        AmptekPX5.h
//
// description : Include for the AmptekPX5 class.
//
// project :     AmptekPX5.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AMPTEKPX5_H
#define AMPTEKPX5_H
#include <tango.h>
#include "amptek.h"
/*----- PROTECTED REGION END -----*/


/**
 *	AmptekPX5 class Description:
 *	Device server to control the MCA Amptek PX5. 
 *	The device server implements the communication by UDP socket. It can start and stop one acquisition and after read the Spectrum data. 
 *	In addition it exports some configuration attributes and a command to send ascii commands.
 *	 
 */

namespace AmptekPX5_ns
{
	/*----- PROTECTED REGION ID(AmptekPX5::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Additional Class Declarations


class AmptekPX5 : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(AmptekPX5::Data Members) ENABLED START -----*/

	//		Add your own data members
	AmptekCommHandler* commHandler;
	 bool thread_exists;
	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Data Members


//	Device property data members
public:		//	Hostname:	Host name of PX5
	string	hostname;
	//	Port:	UDP port number
	Tango::DevLong	port;
	//	Timeout:	socket timeout for receiving communication
	Tango::DevDouble	timeout;
	//	NrOfUdpAttempts:	How many time udp request is repeated
	Tango::DevUShort	nrOfUdpAttempts;
	

//	Attribute data members
public:
	Tango::DevULong	*attr_FastCount_read;
	Tango::DevULong	*attr_SlowCount_read;
	Tango::DevDouble	*attr_AcquisitionTime_read;
	Tango::DevShort	*attr_CoarseGain_read;
	Tango::DevString	*attr_PileupReject_read;
	Tango::DevDouble	*attr_FlatTopWidth_read;
	Tango::DevDouble	*attr_PeakingTime_read;
	Tango::DevULong	*attr_MCAC_read;
	Tango::DevDouble	*attr_FineGain_read;
	Tango::DevDouble	*attr_TotalGain_read;
	Tango::DevDouble	*attr_Clock_read;
	Tango::DevDouble	*attr_DeadTime_read;
	Tango::DevULong	*attr_Spectrum_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AmptekPX5(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AmptekPX5(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	AmptekPX5(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~AmptekPX5() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : AmptekPX5::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	FastCount attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_FastCount(Tango::Attribute &attr);
	virtual bool is_FastCount_allowed(Tango::AttReqType type);



	/**
	 *	SlowCount attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_SlowCount(Tango::Attribute &attr);
	virtual bool is_SlowCount_allowed(Tango::AttReqType type);



	/**
	 *	AcquisitionTime attribute related methods.
	 *	Description: It sets the preset acquisition time.
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_AcquisitionTime(Tango::Attribute &attr);
	virtual void write_AcquisitionTime(Tango::WAttribute &attr);
	virtual bool is_AcquisitionTime_allowed(Tango::AttReqType type);



	/**
	 *	CoarseGain attribute related methods.
	 *	Description: It Selects the analog gain.
	 *
	 *	Data type:	Tango::DevShort
	 *	Attr type:	Scalar 
	 */
	virtual void read_CoarseGain(Tango::Attribute &attr);
	virtual void write_CoarseGain(Tango::WAttribute &attr);
	virtual bool is_CoarseGain_allowed(Tango::AttReqType type);



	/**
	 *	PileupReject attribute related methods.
	 *	Description: It`s used to enable or disable Pile-up Rejection.
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_PileupReject(Tango::Attribute &attr);
	virtual void write_PileupReject(Tango::WAttribute &attr);
	virtual bool is_PileupReject_allowed(Tango::AttReqType type);



	/**
	 *	FlatTopWidth attribute related methods.
	 *	Description: It selects the flat top width of the trapezoidal shaper. A flat top fo 0uS will result in a triangular shape, not trapezoidal.
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_FlatTopWidth(Tango::Attribute &attr);
	virtual void write_FlatTopWidth(Tango::WAttribute &attr);
	virtual bool is_FlatTopWidth_allowed(Tango::AttReqType type);



	/**
	 *	PeakingTime attribute related methods.
	 *	Description: It selects the peaking time for the slow (shape) channel.
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_PeakingTime(Tango::Attribute &attr);
	virtual void write_PeakingTime(Tango::WAttribute &attr);
	virtual bool is_PeakingTime_allowed(Tango::AttReqType type);



	/**
	 *	MCAC attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_MCAC(Tango::Attribute &attr);
	virtual void write_MCAC(Tango::WAttribute &attr);
	virtual bool is_MCAC_allowed(Tango::AttReqType type);



	/**
	 *	FineGain attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_FineGain(Tango::Attribute &attr);
	virtual void write_FineGain(Tango::WAttribute &attr);
	virtual bool is_FineGain_allowed(Tango::AttReqType type);



	/**
	 *	TotalGain attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_TotalGain(Tango::Attribute &attr);
	virtual bool is_TotalGain_allowed(Tango::AttReqType type);



	/**
	 *	Clock attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Clock(Tango::Attribute &attr);
	virtual void write_Clock(Tango::WAttribute &attr);
	virtual bool is_Clock_allowed(Tango::AttReqType type);



	/**
	 *	DeadTime attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_DeadTime(Tango::Attribute &attr);
	virtual bool is_DeadTime_allowed(Tango::AttReqType type);



	/**
	 *	Spectrum attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Spectrum  max = 8192
	 */
	virtual void read_Spectrum(Tango::Attribute &attr);
	virtual bool is_Spectrum_allowed(Tango::AttReqType type);



	/**
	 *	Method      : AmptekPX5::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();

//	Command related methods
public: 
	/**
	 *	Command State related methods.
	 */
	Tango::DevState dev_state();


	/**
	 *	Command SetTextConfiguration related methods.
	 */
	void set_text_configuration(const Tango::DevVarStringArray *argin);
	virtual bool is_SetTextConfiguration_allowed(const CORBA::Any &any);

	/**
	 *	Command GetTextConfiguration related methods.
	 */
	Tango::DevVarStringArray *get_text_configuration(const Tango::DevVarStringArray *argin);
	virtual bool is_GetTextConfiguration_allowed(const CORBA::Any &any);

	/**
	 *	Command Echo related methods.
	 */
	Tango::DevString echo(Tango::DevString argin);
	virtual bool is_Echo_allowed(const CORBA::Any &any);

	/**
	 *	Command Enable related methods.
	 */
	void enable();
	virtual bool is_Enable_allowed(const CORBA::Any &any);

	/**
	 *	Command Disable related methods.
	 */
	void disable();
	virtual bool is_Disable_allowed(const CORBA::Any &any);

	/**
	 *	Command ClearSpectrum related methods.
	 */
	void clear_spectrum();
	virtual bool is_ClearSpectrum_allowed(const CORBA::Any &any);

	/**
	 *	Command LatchGetClearSCA related methods.
	 */
	Tango::DevVarULongArray *latch_get_clear_sca();
	virtual bool is_LatchGetClearSCA_allowed(const CORBA::Any &any);

	/**
	 *	Command ClearInputBuffer related methods.
	 */
	void clear_input_buffer();
	virtual bool is_ClearInputBuffer_allowed(const CORBA::Any &any);

	/**
	 *	Command AutoTune related methods.
	 */
	void auto_tune();
	virtual bool is_AutoTune_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(AmptekPX5::Additional Method prototypes) ENABLED START -----*/

	std::string read_parameter(std::string cmd);
	void write_parameter(std::string cmd, std::string value);
	void update_total_gain();
	void update_flat_top_width();
	void update_peaking_time();
	static void* Auto_Tune_Thread(void *arg);



	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(AmptekPX5::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions
       

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Additional Classes Definitions

} //	namespace

#endif	//	AMPTEKPX5_H
