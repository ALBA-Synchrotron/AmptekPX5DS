/*----- PROTECTED REGION ID(AmptekPX5Class.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        AmptekPX5Class.cpp
//
// description : C++ source for the AmptekPX5Class. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the «name» once per process.
//
// project :     AmptekPX5.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <AmptekPX5Class.h>

/*----- PROTECTED REGION END -----*/

//-------------------------------------------------------------------
/**
 *	Create AmptekPX5Class singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_AmptekPX5_class(const char *name) {
		return AmptekPX5_ns::AmptekPX5Class::init(name);
	}
}


namespace AmptekPX5_ns
{


//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
AmptekPX5Class *AmptekPX5Class::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::AmptekPX5Class(string &s)
 * description : 	constructor for the AmptekPX5Class
 *
 * @param s	The class name
 */
//--------------------------------------------------------
AmptekPX5Class::AmptekPX5Class(string &s):DeviceClass(s)
{
	cout2 << "Entering AmptekPX5Class constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(AmptekPX5::Class::constructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::constructor

	cout2 << "Leaving AmptekPX5Class constructor" << endl;
}


//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::~AmptekPX5Class()
 * description : 	destructor for the AmptekPX5Class
 */
//--------------------------------------------------------
AmptekPX5Class::~AmptekPX5Class()
{
	/*----- PROTECTED REGION ID(AmptekPX5::Class::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
AmptekPX5Class *AmptekPX5Class::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new AmptekPX5Class(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
AmptekPX5Class *AmptekPX5Class::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}




//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		SetTextConfigurationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetTextConfigurationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetTextConfigurationClass::execute(): arrived" << endl;

	const Tango::DevVarStringArray	*argin;
	extract(in_any, argin);
	((static_cast<AmptekPX5 *>(device))->set_text_configuration(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		GetTextConfigurationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetTextConfigurationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetTextConfigurationClass::execute(): arrived" << endl;

	const Tango::DevVarStringArray	*argin;
	extract(in_any, argin);
	return insert((static_cast<AmptekPX5 *>(device))->get_text_configuration(argin));
}
//--------------------------------------------------------
/**
 * method : 		EchoClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EchoClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EchoClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);
	return insert((static_cast<AmptekPX5 *>(device))->echo(argin));
}
//--------------------------------------------------------
/**
 * method : 		EnableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableClass::execute(): arrived" << endl;

	
	((static_cast<AmptekPX5 *>(device))->enable());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DisableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableClass::execute(): arrived" << endl;

	
	((static_cast<AmptekPX5 *>(device))->disable());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		ClearSpectrumClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ClearSpectrumClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ClearSpectrumClass::execute(): arrived" << endl;

	
	((static_cast<AmptekPX5 *>(device))->clear_spectrum());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		LatchGetClearSCAClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LatchGetClearSCAClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LatchGetClearSCAClass::execute(): arrived" << endl;

	
	return insert((static_cast<AmptekPX5 *>(device))->latch_get_clear_sca());
}
//--------------------------------------------------------
/**
 * method : 		ClearInputBufferClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ClearInputBufferClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ClearInputBufferClass::execute(): arrived" << endl;

	
	((static_cast<AmptekPX5 *>(device))->clear_input_buffer());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		AutoTuneClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AutoTuneClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AutoTuneClass::execute(): arrived" << endl;

	
	((static_cast<AmptekPX5 *>(device))->auto_tune());
	return new CORBA::Any();
}




//===================================================================
//	Properties management
//===================================================================

//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::get_class_property
 * description : 	Get the class property for specified name.
 *
 * @param	name  The property name
 */
//--------------------------------------------------------
Tango::DbDatum AmptekPX5Class::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::get_default_device_property()()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum AmptekPX5Class::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::get_default_class_property()()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum AmptekPX5Class::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::get_class_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void AmptekPX5Class::get_class_property()
{
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *	              For each property, add to wizard property name and description.
 *	              If default value has been set, add it to wizard property and.
 *	              store it in a DbDatum.
 */
//--------------------------------------------------------
void AmptekPX5Class::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;
	
	//	Set Default Class Properties

	//	Set Default Device Properties

	prop_name = "Hostname";
	prop_desc = "Host name of PX5";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Port";
	prop_desc = "UDP port number";
	prop_def  = "10001\n";
	vect_data.clear();
	vect_data.push_back("10001");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Timeout";
	prop_desc = "socket timeout for receiving communication";
	prop_def  = "1\n";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "NrOfUdpAttempts";
	prop_desc = "How many time udp request is repeated";
	prop_def  = "2\n";
	vect_data.clear();
	vect_data.push_back("2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void AmptekPX5Class::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("AmptekPX5");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device server to control the MCA Amptek PX5. ");
	str_desc.push_back("The device server implements the communication by UDP socket. It can start and stop one acquisition and after read the Spectrum data. ");
	str_desc.push_back("In addition it exports some configuration attributes and a command to send ascii commands.");
	str_desc.push_back(" ");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs or svn location
	string	filename("AmptekPX5");
	filename += "Class.cpp";
	
	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}




//===================================================================
//	Factory methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
//--------------------------------------------------------
void AmptekPX5Class::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	/*----- PROTECTED REGION ID(AmptekPX5::Class::device_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new AmptekPX5(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		AmptekPX5 *dev = static_cast<AmptekPX5 *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(AmptekPX5::Class::device_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::device_factory_after

	
}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::attribute_factory()
 *	Description : Create the attribute object(s)
 *	              and store them in the attribute list
 */
//--------------------------------------------------------
void AmptekPX5Class::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(AmptekPX5::Class::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::attribute_factory_before


	//	Attribute : FastCount
	FastCountAttrib	*fastcount = new FastCountAttrib();
	Tango::UserDefaultAttrProp	fastcount_prop;
	//	description	not set for	FastCount
	//	label	not set for	FastCount
	//	unit	not set for	FastCount
	//	standard_unit	not set for	FastCount
	//	display_unit	not set for	FastCount
	//	format	not set for	FastCount
	//	max_value	not set for	FastCount
	//	min_value	not set for	FastCount
	//	max_alarm	not set for	FastCount
	//	min_alarm	not set for	FastCount
	//	max_warning	not set for	FastCount
	//	min_warning	not set for	FastCount
	//	delta_t	not set for	FastCount
	//	delta_val	not set for	FastCount
	fastcount->set_default_properties(fastcount_prop);
	//	Not Polled
	fastcount->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	FastCount does not fire change event
	//	FastCount does not fire archive event
	//	FastCount does not fire data_ready event
	att_list.push_back(fastcount);

	//	Attribute : SlowCount
	SlowCountAttrib	*slowcount = new SlowCountAttrib();
	Tango::UserDefaultAttrProp	slowcount_prop;
	//	description	not set for	SlowCount
	//	label	not set for	SlowCount
	//	unit	not set for	SlowCount
	//	standard_unit	not set for	SlowCount
	//	display_unit	not set for	SlowCount
	//	format	not set for	SlowCount
	//	max_value	not set for	SlowCount
	//	min_value	not set for	SlowCount
	//	max_alarm	not set for	SlowCount
	//	min_alarm	not set for	SlowCount
	//	max_warning	not set for	SlowCount
	//	min_warning	not set for	SlowCount
	//	delta_t	not set for	SlowCount
	//	delta_val	not set for	SlowCount
	slowcount->set_default_properties(slowcount_prop);
	//	Not Polled
	slowcount->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	SlowCount does not fire change event
	//	SlowCount does not fire archive event
	//	SlowCount does not fire data_ready event
	att_list.push_back(slowcount);

	//	Attribute : AcquisitionTime
	AcquisitionTimeAttrib	*acquisitiontime = new AcquisitionTimeAttrib();
	Tango::UserDefaultAttrProp	acquisitiontime_prop;
	acquisitiontime_prop.set_description("It sets the preset acquisition time.");
	acquisitiontime_prop.set_label("AcquisitionTime");
	acquisitiontime_prop.set_unit("s");
	//	standard_unit	not set for	AcquisitionTime
	//	display_unit	not set for	AcquisitionTime
	//	format	not set for	AcquisitionTime
	//	max_value	not set for	AcquisitionTime
	//	min_value	not set for	AcquisitionTime
	//	max_alarm	not set for	AcquisitionTime
	//	min_alarm	not set for	AcquisitionTime
	//	max_warning	not set for	AcquisitionTime
	//	min_warning	not set for	AcquisitionTime
	//	delta_t	not set for	AcquisitionTime
	//	delta_val	not set for	AcquisitionTime
	acquisitiontime->set_default_properties(acquisitiontime_prop);
	//	Not Polled
	acquisitiontime->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	acquisitiontime->set_change_event(true, true);
	//	AcquisitionTime does not fire archive event
	//	AcquisitionTime does not fire data_ready event
	att_list.push_back(acquisitiontime);

	//	Attribute : CoarseGain
	CoarseGainAttrib	*coarsegain = new CoarseGainAttrib();
	Tango::UserDefaultAttrProp	coarsegain_prop;
	coarsegain_prop.set_description("It Selects the analog gain.");
	coarsegain_prop.set_label("CoarseGain");
	coarsegain_prop.set_unit("none");
	//	standard_unit	not set for	CoarseGain
	//	display_unit	not set for	CoarseGain
	//	format	not set for	CoarseGain
	//	max_value	not set for	CoarseGain
	//	min_value	not set for	CoarseGain
	//	max_alarm	not set for	CoarseGain
	//	min_alarm	not set for	CoarseGain
	//	max_warning	not set for	CoarseGain
	//	min_warning	not set for	CoarseGain
	//	delta_t	not set for	CoarseGain
	//	delta_val	not set for	CoarseGain
	coarsegain->set_default_properties(coarsegain_prop);
	//	Not Polled
	coarsegain->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	coarsegain->set_change_event(true, true);
	//	CoarseGain does not fire archive event
	//	CoarseGain does not fire data_ready event
	att_list.push_back(coarsegain);

	//	Attribute : PileupReject
	PileupRejectAttrib	*pileupreject = new PileupRejectAttrib();
	Tango::UserDefaultAttrProp	pileupreject_prop;
	pileupreject_prop.set_description("It`s used to enable or disable Pile-up Rejection.");
	pileupreject_prop.set_label("PileupReject");
	pileupreject_prop.set_unit("us");
	//	standard_unit	not set for	PileupReject
	//	display_unit	not set for	PileupReject
	//	format	not set for	PileupReject
	//	max_value	not set for	PileupReject
	//	min_value	not set for	PileupReject
	//	max_alarm	not set for	PileupReject
	//	min_alarm	not set for	PileupReject
	//	max_warning	not set for	PileupReject
	//	min_warning	not set for	PileupReject
	//	delta_t	not set for	PileupReject
	//	delta_val	not set for	PileupReject
	pileupreject->set_default_properties(pileupreject_prop);
	//	Not Polled
	pileupreject->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	pileupreject->set_change_event(true, true);
	//	PileupReject does not fire archive event
	//	PileupReject does not fire data_ready event
	att_list.push_back(pileupreject);

	//	Attribute : FlatTopWidth
	FlatTopWidthAttrib	*flattopwidth = new FlatTopWidthAttrib();
	Tango::UserDefaultAttrProp	flattopwidth_prop;
	flattopwidth_prop.set_description("It selects the flat top width of the trapezoidal shaper. A flat top fo 0uS will result in a triangular shape, not trapezoidal.");
	flattopwidth_prop.set_label("FlatTopWidth");
	flattopwidth_prop.set_unit("us");
	//	standard_unit	not set for	FlatTopWidth
	//	display_unit	not set for	FlatTopWidth
	//	format	not set for	FlatTopWidth
	//	max_value	not set for	FlatTopWidth
	//	min_value	not set for	FlatTopWidth
	//	max_alarm	not set for	FlatTopWidth
	//	min_alarm	not set for	FlatTopWidth
	//	max_warning	not set for	FlatTopWidth
	//	min_warning	not set for	FlatTopWidth
	//	delta_t	not set for	FlatTopWidth
	//	delta_val	not set for	FlatTopWidth
	flattopwidth->set_default_properties(flattopwidth_prop);
	//	Not Polled
	flattopwidth->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	flattopwidth->set_change_event(true, true);
	//	FlatTopWidth does not fire archive event
	//	FlatTopWidth does not fire data_ready event
	att_list.push_back(flattopwidth);

	//	Attribute : PeakingTime
	PeakingTimeAttrib	*peakingtime = new PeakingTimeAttrib();
	Tango::UserDefaultAttrProp	peakingtime_prop;
	peakingtime_prop.set_description("It selects the peaking time for the slow (shape) channel.");
	peakingtime_prop.set_label("PeakingTime");
	peakingtime_prop.set_unit("us");
	//	standard_unit	not set for	PeakingTime
	//	display_unit	not set for	PeakingTime
	//	format	not set for	PeakingTime
	//	max_value	not set for	PeakingTime
	//	min_value	not set for	PeakingTime
	//	max_alarm	not set for	PeakingTime
	//	min_alarm	not set for	PeakingTime
	//	max_warning	not set for	PeakingTime
	//	min_warning	not set for	PeakingTime
	//	delta_t	not set for	PeakingTime
	//	delta_val	not set for	PeakingTime
	peakingtime->set_default_properties(peakingtime_prop);
	//	Not Polled
	peakingtime->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	peakingtime->set_change_event(true, true);
	//	PeakingTime does not fire archive event
	//	PeakingTime does not fire data_ready event
	att_list.push_back(peakingtime);

	//	Attribute : MCAC
	MCACAttrib	*mcac = new MCACAttrib();
	Tango::UserDefaultAttrProp	mcac_prop;
	//	description	not set for	MCAC
	mcac_prop.set_label("MCAC");
	//	unit	not set for	MCAC
	//	standard_unit	not set for	MCAC
	//	display_unit	not set for	MCAC
	//	format	not set for	MCAC
	//	max_value	not set for	MCAC
	//	min_value	not set for	MCAC
	//	max_alarm	not set for	MCAC
	//	min_alarm	not set for	MCAC
	//	max_warning	not set for	MCAC
	//	min_warning	not set for	MCAC
	//	delta_t	not set for	MCAC
	//	delta_val	not set for	MCAC
	mcac->set_default_properties(mcac_prop);
	//	Not Polled
	mcac->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	mcac->set_change_event(true, true);
	//	MCAC does not fire archive event
	//	MCAC does not fire data_ready event
	att_list.push_back(mcac);

	//	Attribute : FineGain
	FineGainAttrib	*finegain = new FineGainAttrib();
	Tango::UserDefaultAttrProp	finegain_prop;
	//	description	not set for	FineGain
	finegain_prop.set_label("FineGain");
	//	unit	not set for	FineGain
	//	standard_unit	not set for	FineGain
	//	display_unit	not set for	FineGain
	//	format	not set for	FineGain
	finegain_prop.set_max_value("1.999");
	finegain_prop.set_min_value("0.5");
	//	max_alarm	not set for	FineGain
	//	min_alarm	not set for	FineGain
	//	max_warning	not set for	FineGain
	//	min_warning	not set for	FineGain
	//	delta_t	not set for	FineGain
	//	delta_val	not set for	FineGain
	finegain->set_default_properties(finegain_prop);
	//	Not Polled
	finegain->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	finegain->set_change_event(true, true);
	//	FineGain does not fire archive event
	//	FineGain does not fire data_ready event
	att_list.push_back(finegain);

	//	Attribute : TotalGain
	TotalGainAttrib	*totalgain = new TotalGainAttrib();
	Tango::UserDefaultAttrProp	totalgain_prop;
	//	description	not set for	TotalGain
	totalgain_prop.set_label("TotalGain");
	//	unit	not set for	TotalGain
	//	standard_unit	not set for	TotalGain
	//	display_unit	not set for	TotalGain
	//	format	not set for	TotalGain
	//	max_value	not set for	TotalGain
	//	min_value	not set for	TotalGain
	//	max_alarm	not set for	TotalGain
	//	min_alarm	not set for	TotalGain
	//	max_warning	not set for	TotalGain
	//	min_warning	not set for	TotalGain
	//	delta_t	not set for	TotalGain
	//	delta_val	not set for	TotalGain
	totalgain->set_default_properties(totalgain_prop);
	//	Not Polled
	totalgain->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	totalgain->set_change_event(true, true);
	//	TotalGain does not fire archive event
	//	TotalGain does not fire data_ready event
	att_list.push_back(totalgain);

	//	Attribute : Clock
	ClockAttrib	*clock = new ClockAttrib();
	Tango::UserDefaultAttrProp	clock_prop;
	//	description	not set for	Clock
	//	label	not set for	Clock
	//	unit	not set for	Clock
	//	standard_unit	not set for	Clock
	//	display_unit	not set for	Clock
	//	format	not set for	Clock
	//	max_value	not set for	Clock
	//	min_value	not set for	Clock
	//	max_alarm	not set for	Clock
	//	min_alarm	not set for	Clock
	//	max_warning	not set for	Clock
	//	min_warning	not set for	Clock
	//	delta_t	not set for	Clock
	//	delta_val	not set for	Clock
	clock->set_default_properties(clock_prop);
	//	Not Polled
	clock->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	clock->set_change_event(true, true);
	//	Clock does not fire archive event
	//	Clock does not fire data_ready event
	att_list.push_back(clock);

	//	Attribute : DeadTime
	DeadTimeAttrib	*deadtime = new DeadTimeAttrib();
	Tango::UserDefaultAttrProp	deadtime_prop;
	//	description	not set for	DeadTime
	//	label	not set for	DeadTime
	//	unit	not set for	DeadTime
	//	standard_unit	not set for	DeadTime
	//	display_unit	not set for	DeadTime
	//	format	not set for	DeadTime
	//	max_value	not set for	DeadTime
	//	min_value	not set for	DeadTime
	//	max_alarm	not set for	DeadTime
	//	min_alarm	not set for	DeadTime
	//	max_warning	not set for	DeadTime
	//	min_warning	not set for	DeadTime
	//	delta_t	not set for	DeadTime
	//	delta_val	not set for	DeadTime
	deadtime->set_default_properties(deadtime_prop);
	//	Not Polled
	deadtime->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	DeadTime does not fire change event
	//	DeadTime does not fire archive event
	//	DeadTime does not fire data_ready event
	att_list.push_back(deadtime);

	//	Attribute : Spectrum
	SpectrumAttrib	*spectrum = new SpectrumAttrib();
	Tango::UserDefaultAttrProp	spectrum_prop;
	//	description	not set for	Spectrum
	//	label	not set for	Spectrum
	//	unit	not set for	Spectrum
	//	standard_unit	not set for	Spectrum
	//	display_unit	not set for	Spectrum
	//	format	not set for	Spectrum
	//	max_value	not set for	Spectrum
	//	min_value	not set for	Spectrum
	//	max_alarm	not set for	Spectrum
	//	min_alarm	not set for	Spectrum
	//	max_warning	not set for	Spectrum
	//	min_warning	not set for	Spectrum
	//	delta_t	not set for	Spectrum
	//	delta_val	not set for	Spectrum
	spectrum->set_default_properties(spectrum_prop);
	//	Not Polled
	spectrum->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Spectrum does not fire change event
	//	Spectrum does not fire archive event
	//	Spectrum does not fire data_ready event
	att_list.push_back(spectrum);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());

	/*----- PROTECTED REGION ID(AmptekPX5::Class::attribute_factory_after) ENABLED START -----*/

	//	Add your own code
	acquisitiontime->set_change_event(true, false);
	coarsegain->set_change_event(true, false );
	pileupreject->set_change_event(true, true);
	flattopwidth->set_change_event(true, false);
	peakingtime->set_change_event(true, false);
	mcac->set_change_event(true, false);
	finegain->set_change_event(true, false);
	totalgain->set_change_event(true, false);
	clock->set_change_event(true, false);
	
	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::attribute_factory_after

}


//--------------------------------------------------------
/**
 *	Method      : AmptekPX5::AmptekPX5Class::command_factory()
 *	Description : Create the command object(s)
 *	              and store them in the command list
 */
//--------------------------------------------------------
void AmptekPX5Class::command_factory()
{
	/*----- PROTECTED REGION ID(AmptekPX5::Class::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::command_factory_before

	SetTextConfigurationClass	*pSetTextConfigurationCmd =
		new SetTextConfigurationClass("SetTextConfiguration",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetTextConfigurationCmd);
	GetTextConfigurationClass	*pGetTextConfigurationCmd =
		new GetTextConfigurationClass("GetTextConfiguration",
			Tango::DEVVAR_STRINGARRAY, Tango::DEVVAR_STRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetTextConfigurationCmd);
	EchoClass	*pEchoCmd =
		new EchoClass("Echo",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEchoCmd);
	EnableClass	*pEnableCmd =
		new EnableClass("Enable",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnableCmd);
	DisableClass	*pDisableCmd =
		new DisableClass("Disable",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDisableCmd);
	ClearSpectrumClass	*pClearSpectrumCmd =
		new ClearSpectrumClass("ClearSpectrum",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pClearSpectrumCmd);
	LatchGetClearSCAClass	*pLatchGetClearSCACmd =
		new LatchGetClearSCAClass("LatchGetClearSCA",
			Tango::DEV_VOID, Tango::DEVVAR_ULONGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLatchGetClearSCACmd);
	ClearInputBufferClass	*pClearInputBufferCmd =
		new ClearInputBufferClass("ClearInputBuffer",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pClearInputBufferCmd);
	AutoTuneClass	*pAutoTuneCmd =
		new AutoTuneClass("AutoTune",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAutoTuneCmd);

	/*----- PROTECTED REGION ID(AmptekPX5::Class::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::command_factory_after

}




//===================================================================
//	Dynamic attributes related methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void AmptekPX5Class::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;


	/*----- PROTECTED REGION ID(AmptekPX5::Class::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::create_static_att_list

}


//--------------------------------------------------------
/**
 * method : 		AmptekPX5Class::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void AmptekPX5Class::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		AmptekPX5 *dev = static_cast<AmptekPX5 *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()],true);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(AmptekPX5::Class::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::erase_dynamic_attributes

}



	/*----- PROTECTED REGION ID(AmptekPX5::Class::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Class::Additional Methods

} //	namespace
