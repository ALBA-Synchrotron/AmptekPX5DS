/*----- PROTECTED REGION ID(AmptekPX5Class.h) ENABLED START -----*/
//=============================================================================
//
// file :        AmptekPX5Class.h
//
// description : Include for the AmptekPX5Class root class.
//               This class is the singleton class for.
//               the AmptekPX5 device class..
//               It contains all properties and methods which the .
//               AmptekPX5 requires only once e.g. the commands.
//
// project :     AmptekPX5.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AMPTEKPX5CLASS_H
#define AMPTEKPX5CLASS_H

#include <tango.h>
#include <AmptekPX5.h>

/*----- PROTECTED REGION END -----*/

namespace AmptekPX5_ns
{
	/*----- PROTECTED REGION ID(AmptekPX5::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute FastCount class definition
class FastCountAttrib: public Tango::Attr
{
public:
	FastCountAttrib():Attr("FastCount",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~FastCountAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FastCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FastCount_allowed(ty);}
};

//	Attribute SlowCount class definition
class SlowCountAttrib: public Tango::Attr
{
public:
	SlowCountAttrib():Attr("SlowCount",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~SlowCountAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_SlowCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_SlowCount_allowed(ty);}
};

//	Attribute AcquisitionTime class definition
class AcquisitionTimeAttrib: public Tango::Attr
{
public:
	AcquisitionTimeAttrib():Attr("AcquisitionTime",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~AcquisitionTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_AcquisitionTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_AcquisitionTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_AcquisitionTime_allowed(ty);}
};

//	Attribute CoarseGain class definition
class CoarseGainAttrib: public Tango::Attr
{
public:
	CoarseGainAttrib():Attr("CoarseGain",
	                   Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~CoarseGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_CoarseGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_CoarseGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_CoarseGain_allowed(ty);}
};

//	Attribute PileupReject class definition
class PileupRejectAttrib: public Tango::Attr
{
public:
	PileupRejectAttrib():Attr("PileupReject",
	                   Tango::DEV_STRING, Tango::READ_WRITE) {};
	~PileupRejectAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_PileupReject(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_PileupReject(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_PileupReject_allowed(ty);}
};

//	Attribute FlatTopWidth class definition
class FlatTopWidthAttrib: public Tango::Attr
{
public:
	FlatTopWidthAttrib():Attr("FlatTopWidth",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FlatTopWidthAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FlatTopWidth(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_FlatTopWidth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FlatTopWidth_allowed(ty);}
};

//	Attribute PeakingTime class definition
class PeakingTimeAttrib: public Tango::Attr
{
public:
	PeakingTimeAttrib():Attr("PeakingTime",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PeakingTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_PeakingTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_PeakingTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_PeakingTime_allowed(ty);}
};

//	Attribute MCAC class definition
class MCACAttrib: public Tango::Attr
{
public:
	MCACAttrib():Attr("MCAC",
	                   Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~MCACAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_MCAC(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_MCAC(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_MCAC_allowed(ty);}
};

//	Attribute FineGain class definition
class FineGainAttrib: public Tango::Attr
{
public:
	FineGainAttrib():Attr("FineGain",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FineGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_FineGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_FineGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_FineGain_allowed(ty);}
};

//	Attribute TotalGain class definition
class TotalGainAttrib: public Tango::Attr
{
public:
	TotalGainAttrib():Attr("TotalGain",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~TotalGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_TotalGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_TotalGain_allowed(ty);}
};

//	Attribute Clock class definition
class ClockAttrib: public Tango::Attr
{
public:
	ClockAttrib():Attr("Clock",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ClockAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Clock(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AmptekPX5 *>(dev))->write_Clock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Clock_allowed(ty);}
};

//	Attribute DeadTime class definition
class DeadTimeAttrib: public Tango::Attr
{
public:
	DeadTimeAttrib():Attr("DeadTime",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~DeadTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_DeadTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_DeadTime_allowed(ty);}
};

//	Attribute Spectrum class definition
class SpectrumAttrib: public Tango::SpectrumAttr
{
public:
	SpectrumAttrib():SpectrumAttr("Spectrum",
	                   Tango::DEV_ULONG, Tango::READ, 8192) {};
	~SpectrumAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AmptekPX5 *>(dev))->read_Spectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AmptekPX5 *>(dev))->is_Spectrum_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command SetTextConfiguration class definition
class SetTextConfigurationClass : public Tango::Command
{
public:
	SetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetTextConfigurationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_SetTextConfiguration_allowed(any);}
};

//	Command GetTextConfiguration class definition
class GetTextConfigurationClass : public Tango::Command
{
public:
	GetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetTextConfigurationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetTextConfigurationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_GetTextConfiguration_allowed(any);}
};

//	Command Echo class definition
class EchoClass : public Tango::Command
{
public:
	EchoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EchoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EchoClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Echo_allowed(any);}
};

//	Command Enable class definition
class EnableClass : public Tango::Command
{
public:
	EnableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EnableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EnableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Enable_allowed(any);}
};

//	Command Disable class definition
class DisableClass : public Tango::Command
{
public:
	DisableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DisableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DisableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_Disable_allowed(any);}
};

//	Command ClearSpectrum class definition
class ClearSpectrumClass : public Tango::Command
{
public:
	ClearSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearSpectrumClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearSpectrumClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_ClearSpectrum_allowed(any);}
};

//	Command LatchGetClearSCA class definition
class LatchGetClearSCAClass : public Tango::Command
{
public:
	LatchGetClearSCAClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LatchGetClearSCAClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LatchGetClearSCAClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_LatchGetClearSCA_allowed(any);}
};

//	Command ClearInputBuffer class definition
class ClearInputBufferClass : public Tango::Command
{
public:
	ClearInputBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearInputBufferClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearInputBufferClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_ClearInputBuffer_allowed(any);}
};

//	Command AutoTune class definition
class AutoTuneClass : public Tango::Command
{
public:
	AutoTuneClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AutoTuneClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AutoTuneClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AmptekPX5 *>(dev))->is_AutoTune_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	AmptekPX5Class : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(AmptekPX5::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AmptekPX5::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AmptekPX5Class *init(const char *);
	static AmptekPX5Class *instance();
	~AmptekPX5Class();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AmptekPX5Class(string &);
	static AmptekPX5Class *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	AMPTEKPX5CLASS_H

